from os.path import join, dirname


include: "rules/utils.smk"

# Sample manifest dict.
MANIFEST = config["samples"]

# CDR and other
WINDOW = config["window_size"]
ALR_THRESHOLD = config.get("alr_threshold", 100000)
BP_MERGE = config.get("bp_merge")
BP_EDGE = config.get("bp_edge", 500_000)
EXTEND_EDGES_STD = config.get("extend_edges_std", -1)
BP_ALR_MERGE = config.get("bp_alr_merge", 1000)
HEIGHT_THRESHOLD = config.get("height_perc_valley_threshold", 0.34)
PROM_THRESHOLD = config.get("prom_perc_valley_threshold", 0.3)
EDGE_HEIGHT_HEURISTIC = config.get("edge_height_heuristic", "min")
BASELINE_AVG_METHYL = config.get("baseline_avg_methyl", 0.4)
RESTRICT_ALR = config.get("restrict_alr", True)
OVERLAP_OPACITY = config.get("overlap_opacity", 0.34)
CONTAINER = config.get("container", None)

# Workflow params
OUTPUT_DIR = config.get("output_dir", "results")
LOG_DIR = config.get("log_dir", "logs")
BMK_DIR = config.get("benchmark_dir", "benchmarks")

if CONTAINER:
    containerized: CONTAINER

wildcard_constraints:
    sample="|".join(MANIFEST.keys()),


###
# Subset fasta: Extracts subsequence from target bed
###


rule subset_fasta:
    input:
        fasta=lambda wc: MANIFEST[wc.sample]["fasta"],
        bed=lambda wc: MANIFEST[wc.sample]["regions"],
    output:
        rm_fasta=join(OUTPUT_DIR, "fasta", "{sample}_subset.fasta"),
        rm_fasta_idx=join(OUTPUT_DIR, "fasta", "{sample}_subset.fasta.fai"),
    log:
        join(LOG_DIR, "subset_fasta_{sample}.log"),
    resources:
        mem=8,
        hrs=1,
    threads: 1
    conda:
        "envs/tools.yaml"
    shell:
        """
        bedtools getfasta -fi {input.fasta} -bed {input.bed} > {output.rm_fasta} 2> {log}
        samtools faidx {output.rm_fasta} 2>> {log}
        """


###
# Get methylation information.
###


rule get_methylation_bed:
    input:
        ref=lambda wc: MANIFEST[wc.sample]["fasta"],
        bam=lambda wc: MANIFEST[wc.sample]["bam"],
        region=lambda wc: MANIFEST[wc.sample]["regions"],
    output:
        methyl_bed=join(OUTPUT_DIR, "bed", "{sample}_methyl.bed"),
    log:
        join(LOG_DIR, "get_methylation_bed_{sample}.log"),
    benchmark:
        join(BMK_DIR, "get_methylation_bed_{sample}.tsv")
    params:
        preset="traditional",
        ref=lambda wc, input: f"<(zcat {input.ref})"
        if str(input.ref).endswith(".gz")
        else input.ref,
    threads: 4
    resources:
        mem=8,
        hrs=1,
    conda:
        "envs/tools.yaml"
    shell:
        """
        samtools index {input.bam} 2> {log}
        modkit pileup {input.bam} {output.methyl_bed} \
        --include-bed {input.region} \
        --threads {threads} \
        --ref {params.ref} \
        --preset {params.preset} 2>> {log}
        """


###
# Rename fasta to avoid RepeatMasker ID limit.
###
rule rename_fasta:
    input:
        fasta=rules.subset_fasta.output.rm_fasta,
        fasta_idx=rules.subset_fasta.output.rm_fasta_idx,
    output:
        renamed_fasta=temp(join(OUTPUT_DIR, "fasta", "{sample}_subset_renamed.fasta")),
        renamed_fasta_idx=temp(
            join(OUTPUT_DIR, "fasta", "{sample}_subset_renamed.fasta.fai")
        ),
        rename_key=join(OUTPUT_DIR, "fasta", "{sample}_subset_rename_key.tsv"),
    log:
        join(LOG_DIR, "rename_fasta_{sample}.log"),
    conda:
        "envs/tools.yaml"
    shell:
        """
        seqtk rename {input.fasta} "seq" > {output.renamed_fasta} 2> {log}
        samtools faidx {output.renamed_fasta} 2>> {log}
        paste -d'\\t' <(cut -f 1 {output.renamed_fasta_idx}) <(cut -f 1 {input.fasta_idx}) > {output.rename_key} 2>> {log}
        """


###
# run_rm: Runs repeatmasker on the extracted subsequence fasta from rule subset_fasta
###


rule run_rm:
    input:
        fasta=rules.rename_fasta.output.renamed_fasta,
    output:
        rm_out=join(
            OUTPUT_DIR,
            "rm",
            "{sample}_subset_renamed.fasta.out",
        ),
    log:
        join(LOG_DIR, "run_rm_{sample}.log"),
    benchmark:
        join(BMK_DIR, "run_rm_{sample}.tsv")
    params:
        engine="rmblast",
        species=config.get("species", "human"),
        output_dir=lambda wc, output: os.path.dirname(str(output)),
    resources:
        mem=8,
        hrs=12,
    threads: 12
    conda:
        "envs/tools.yaml"
    shell:
        """
        RepeatMasker \
        -engine {params.engine} \
        -species {params.species} \
        -dir {params.output_dir} \
        -qq \
        -pa {threads} \
        {input.fasta} > {log}
        """


###
# Calculates mean frequency in windows/bins of the methylation tsv over the target region
###


rule calc_windows:
    input:
        script=workflow.source_path("scripts/calculate_windows.py"),
        methylation_tsv=rules.get_methylation_bed.output,
        target_bed=lambda wc: MANIFEST[wc.sample]["regions"],
    output:
        binned_freq=join(OUTPUT_DIR, "bed", "{sample}_binned_freq.bed"),
    log:
        join(LOG_DIR, "calc_windows_{sample}.log"),
    benchmark:
        join(BMK_DIR, "calc_windows_{sample}.tsv")
    threads: 1
    resources:
        mem=8,
        hrs=1,
    threads: 1
    conda:
        "envs/python.yaml"
    params:
        window_size=WINDOW,
    shell:
        """
        python {input.script} \
        --target_bed {input.target_bed} \
        --methylation_tsv {input.methylation_tsv} \
        --window_size {params.window_size} \
        -p {threads} > {output} 2> {log}
        """


###
# Format RM: Converts Repeatmasker output to bedfile and extracts only ALR annotations
###


rule format_filter_RM:
    input:
        rm_out=rules.run_rm.output.rm_out,
        rename_key=rules.rename_fasta.output.rename_key,
    output:
        rm_bed=join(OUTPUT_DIR, "bed", "{sample}_rm.bed"),
        rm_alr_bed=join(OUTPUT_DIR, "bed", "{sample}_rm_ALR.bed"),
    log:
        join(LOG_DIR, "format_filter_RM_{sample}.log"),
    resources:
        mem=8,
        hrs=1,
    conda:
        "envs/tools.yaml"
    threads: 1
    shell:
        """
        awk -v OFS="\\t" '{{
            # Read key values in first file.
            if (FNR == NR) {{
                kv[$1]=$2;
                next;
            }}
            # Skip header.
            else if (FNR > 3) {{
                # Replace renamed seq name with original.
                chr_name=kv[$5]
                # Get chr name without coordinates
                split(chr_name, chr_names, ":")
                print chr_names[1], $6, $7, $10, $11, $9 > "{output.rm_bed}"
                if ( $10 ~ "ALR" ) {{
                    print chr_names[1], $6, $7, $10, $9
                }}
            }}
        }}' {input.rename_key} {input.rm_out} > {output.rm_alr_bed} 2> {log}
        """


###
# Adjust coordinates by adding back target bed coords.
###
use rule add_target_bed_coords as add_target_bed_coords_rm_alr with:
    input:
        # 3-cols
        target_bed=lambda wc: MANIFEST[wc.sample]["regions"],
        # 5-cols
        bed=rules.format_filter_RM.output.rm_alr_bed,
    output:
        bed=join(OUTPUT_DIR, "bed", "{sample}_rm_ALR_adj.bed"),
    log:
        join(LOG_DIR, "add_target_bed_coords_rm_alr_{sample}.log"),
    params:
        col_st="$2",
        col_end="$3",
        col_add="$6",
        col_other=",$4,$5",


use rule add_target_bed_coords as add_target_bed_coords_rm with:
    input:
        target_bed=lambda wc: MANIFEST[wc.sample]["regions"],
        bed=rules.format_filter_RM.output.rm_bed,
    output:
        bed=join(OUTPUT_DIR, "bed", "{sample}_rm_adj.bed"),
    log:
        join(LOG_DIR, "add_target_bed_coords_rm_{sample}.log"),
    params:
        col_st="$2",
        col_end="$3",
        col_add="$7",
        col_other=",$4,$5,$6",


use rule add_target_bed_coords as add_target_bed_coords_windows with:
    input:
        target_bed=lambda wc: MANIFEST[wc.sample]["regions"],
        bed=rules.calc_windows.output,
    output:
        bed=join(OUTPUT_DIR, "bed", "{sample}_binned_freq_adj.bed"),
    log:
        join(LOG_DIR, "add_target_bed_coords_windows_{sample}.log"),
    params:
        col_st="$2",
        col_end="$3",
        col_add="$6",
        col_other=",$4,$5",


###
# Intersect RM: Merges repeatmasker bed file with 500bp slop, and only keeps those above the ALR Threshold
#               Intersects merged ALR bed file with binned methylation frequency bedfile
###


rule intersect_RM:
    input:
        repeat_masker=rules.add_target_bed_coords_rm_alr.output,
        binned_freq=rules.add_target_bed_coords_windows.output,
    output:
        intersect_bed=join(OUTPUT_DIR, "bed", "{sample}_intersect.bed"),
    log:
        join(LOG_DIR, "intersect_RM_{sample}.log"),
    benchmark:
        join(BMK_DIR, "intersect_RM_{sample}.tsv")
    resources:
        mem=8,
        hrs=1,
    params:
        alr_threshold=ALR_THRESHOLD,
        bp_alr_merge=BP_ALR_MERGE,
        merge_interm_bed=join(OUTPUT_DIR, "bed", "{sample}_rm_merged.bed"),
    threads: 1
    conda:
        "envs/tools.yaml"
    shell:
        """
        {{ bedtools merge -i {input.repeat_masker} -d {params.bp_alr_merge} | \
        awk '{{if ($3-$2 > {params.alr_threshold}) print}}' ;}} > {params.merge_interm_bed} 2> {log}
        bedtools intersect -a {input.binned_freq} -b {params.merge_interm_bed} -f 1 -wa -u > {output.intersect_bed} 2>> {log}
        """


checkpoint call_cdrs:
    input:
        script=workflow.source_path("scripts/cdr_finder.py"),
        methyl_bed=(
            rules.intersect_RM.output.intersect_bed
            if RESTRICT_ALR
            else rules.add_target_bed_coords_windows.output
        ),
        override_chrom_params=lambda wc: (
            MANIFEST[wc.sample]["override_chrom_params"]
            if MANIFEST[wc.sample].get("override_chrom_params", [])
            else []
        ),
    output:
        cdrs=join(OUTPUT_DIR, "bed", "{sample}_CDR.bed"),
    log:
        join(LOG_DIR, "call_cdrs_{sample}.log"),
    benchmark:
        join(BMK_DIR, "call_cdrs_{sample}.tsv")
    resources:
        mem=8,
        hrs=1,
    params:
        bp_merge=f"--bp_merge {BP_MERGE}" if BP_MERGE else "",
        bp_edge=BP_EDGE,
        thr_prom_perc_valley=(
            f"--thr_prom_perc_valley {PROM_THRESHOLD}" if PROM_THRESHOLD else ""
        ),
        edge_height_heuristic=EDGE_HEIGHT_HEURISTIC,
        extend_edges_std=(
            f"--extend_edges_std {EXTEND_EDGES_STD}"
            if isinstance(EXTEND_EDGES_STD, int)
            else ""
        ),
        thr_height_perc_valley=HEIGHT_THRESHOLD,
        override_chrom_params=lambda wc, input: (
            f"--override_chrom_params {input.override_chrom_params}"
            if input.override_chrom_params
            else ""
        ),
        baseline_avg_methyl=(
            f"--baseline_avg_methyl {BASELINE_AVG_METHYL}"
            if BASELINE_AVG_METHYL
            else ""
        ),
    conda:
        "envs/python.yaml"
    threads: 1
    shell:
        """
        python {input.script} \
        -i {input.methyl_bed} \
        --thr_height_perc_valley {params.thr_height_perc_valley} \
        --bp_edge {params.bp_edge} \
        --edge_height_heuristic {params.edge_height_heuristic} \
        {params.bp_merge} \
        {params.thr_prom_perc_valley} \
        {params.extend_edges_std} \
        {params.override_chrom_params} \
        {params.baseline_avg_methyl} > {output} 2> {log}
        """


rule format_files_for_cenplot:
    input:
        script=workflow.source_path("scripts/format_files_for_cenplot.py"),
        plot_layout=workflow.source_path("scripts/plot_layout.toml"),
        binned_freq_bed=rules.add_target_bed_coords_windows.output,
        cdr_bed=rules.call_cdrs.output,
        rm_bed=rules.add_target_bed_coords_rm.output,
    output:
        cdr_bed=join(OUTPUT_DIR, "bed", "{sample}", "{ctg}", "cdr.bed"),
        cov_bed=join(OUTPUT_DIR, "bed", "{sample}", "{ctg}", "cov.bed"),
        methyl_cov_bed=join(OUTPUT_DIR, "bed", "{sample}", "{ctg}", "methyl_cov.bed"),
        methyl_avg_cov_bed=join(
            OUTPUT_DIR, "bed", "{sample}", "{ctg}", "methyl_avg_cov.bed"
        ),
        rm_bed=join(OUTPUT_DIR, "bed", "{sample}", "{ctg}", "rm.bed"),
        plot_layout=join(OUTPUT_DIR, "plot", "{sample}", "{ctg}_plot_layout.toml"),
    conda:
        "envs/python.yaml"
    params:
        outdir=lambda wc, output: dirname(dirname(output.cdr_bed)),
        esc_outdir=lambda wc, output: dirname(output.cdr_bed).replace("/", "\\/"),
        overlap_opacity=OVERLAP_OPACITY
    log:
        join(LOG_DIR, "format_files_for_cenplot_{sample}_{ctg}.log"),
    shell:
        """
        python {input.script} \
        --ctg {wildcards.ctg} \
        --bed_binned_freq {input.binned_freq_bed} \
        --bed_cdr {input.cdr_bed} \
        --bed_rm {input.rm_bed} \
        --outdir {params.outdir} 2> {log}
        # Replace outdir format string with outdir
        sed -e 's/{{outdir}}/{params.esc_outdir}/g' -e 's/"{{overlap_opacity}}"/{params.overlap_opacity}/g' {input.plot_layout} > {output.plot_layout} 2> {log}
        """


rule plot_cdr:
    input:
        plot_layout=rules.format_files_for_cenplot.output.plot_layout,
    output:
        join(OUTPUT_DIR, "plot", "{sample}", "{ctg}.png"),
    log:
        join(LOG_DIR, "plot_cdr_{sample}_{ctg}.log"),
    benchmark:
        join(BMK_DIR, "plot_cdr_{sample}_{ctg}.tsv")
    params:
        outdir=lambda wc, output: dirname(output[0]),
    resources:
        mem=8,
        hrs=1,
    conda:
        "envs/python.yaml"
    shell:
        """
        cenplot draw -t {input.plot_layout} -c {wildcards.ctg} -d {params.outdir} -p 1 2> {log}
        """


def all_cdr_plots(wc):
    cdr_file = checkpoints.call_cdrs.get(**wc).output[0]
    ctgs = set()
    with open(cdr_file, "rt") as fh:
        for line in fh.readlines():
            ctg, *_ = line.strip().split("\t")
            ctgs.add(ctg)

    wildcard_constraints:
        ctg="|".join(ctgs),

    return expand(rules.plot_cdr.output, sample=wc.sample, ctg=ctgs)


rule cdr_plots:
    input:
        all_cdr_plots,
    output:
        touch(join(OUTPUT_DIR, "plot", "{sample}.done")),


rule all:
    input:
        expand(rules.call_cdrs.output, sample=MANIFEST.keys()),
        expand(rules.cdr_plots.output, sample=MANIFEST.keys()),
    default_target: True
